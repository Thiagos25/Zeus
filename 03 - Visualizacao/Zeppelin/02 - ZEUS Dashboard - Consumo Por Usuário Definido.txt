
--Consumo Semanal de Energia

%sql
select 
  CASE 
    WHEN dia = 'Monday' THEN '1 - Segunda' 
    WHEN dia = 'Tuesday' THEN '2 - Terça-feira'
    WHEN dia = 'Wednesday' THEN '3 - Quarta-feira' 
    WHEN dia = 'Thursday' THEN '4 - Quinta-feira' 
    WHEN dia = 'Friday' THEN '5 - Sexta-feira'
    WHEN dia = 'Saturday' THEN '6 - Sábado'
    WHEN dia = 'Sunday' THEN '7 - Domingo'
  END AS dia, valor
from (
        select from_unixtime(unix_timestamp(created_time, 'EEE MMM d HH:mm:ss Z yyyy'),'EEEE') as dia, round((sum(Energia.potencia/86400000)),2) as valor -- //1 day - 86400000 ms
        from Zeus.Energia_orc as Energia
        where Energia.user_id = 1 
        Group by from_unixtime(unix_timestamp(created_time, 'EEE MMM d HH:mm:ss Z yyyy'),'EEEE')
     ) as energia 
Order by dia
       

--Geoposição dos Dispositivos
%angular

<!-- place this in an %angular paragraph -->

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.css" />
<div id="map" style="height: 400px; width: 100%"></div>

<script type="text/javascript">
function initMap() {
    var map = L.map('map').setView([-23.4294,-46.6481],11);

    L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors',
        maxZoom: 12,
        minZoom: 3
    }).addTo(map);

    var geoMarkers = L.layerGroup().addTo(map);
    
   var el = angular.element($('#map').parent('.ng-scope'));
    angular.element(el).ready(function() {
        window.locationWatcher = el.scope().compiledScope.$watch('locations', function(newValue, oldValue) {
            // geoMarkers.clearLayers(); -- if you want to only show new data clear the layer first
            // console.log("new value: " + newValue);
            angular.forEach(newValue, function(wind) {
                try { JSON.parse(wind); } catch(error) { alert(error); }
                windJSON = JSON.parse(wind)
                var marker = L.marker([windJSON.loc.lat, windJSON.loc.lon]).bindPopup(windJSON.value).addTo(geoMarkers);
            });
        })
    });
}

if (window.locationWatcher) {
    // clear existing watcher otherwise we'll have duplicates
    window.locationWatcher();
}

// ensure we only load the script once, seems to cause issues otherwise
if (window.L) {
    initMap();
} else {
    console.log('Loading Leaflet library');
    var sc = document.createElement('script');
    sc.type = 'text/javascript';
    sc.src = 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.5/leaflet.js';
    sc.onload = initMap;
    sc.onerror = function(err) { alert(err); }
    document.getElementsByTagName('head')[0].appendChild(sc);
}
</script>







--Consumo Mensal

%spark 

val valor_df = sqlContext.sql("select month(from_unixtime(unix_timestamp(created_time, 'EEE MMM d HH:mm:ss Z yyyy'),'yyyy-MM-dd')) as mes, round((sum(Energia.potencia/86400000)),2) as valor from Zeus.Energia_orc as Energia where Energia.user_id = 1 Group by month(from_unixtime(unix_timestamp(created_time, 'EEE MMM d HH:mm:ss Z yyyy'),'yyyy-MM-dd'))").collect.map(s=>s(1))

print(s"""%angular     
<h2> Valor Gasto no Mês Corrente: R&#36; {{valor_df[0]}}</h2>
""")





--Bind GeoPosicionamento
%spark

import scala.util.parsing.json.JSONObject
import org.apache.spark.sql._
import org.json4s._
import org.json4s.JsonDSL._
import org.json4s.jackson.JsonMethods._

val location_df = sqlContext.sql("select Cidade.latitude, Cidade.longitude, Usuario.nome_usuario, sum(Energia.Potencia) as Potencia from Zeus.Energia left outer join Zeus.Usuario on Energia.user_id = Usuario.id left outer join Zeus.Dispositivo on Energia.dispositivo_id = Dispositivo.id left outer join Zeus.Cidade on Dispositivo.id_cidade = Cidade.id where (Usuario.id == 01 and Cidade.id = 01) or (Usuario.id == 02 and Cidade.id = 03) or (Usuario.id == 03 and Cidade.id = 02) group by Usuario.nome_usuario, Cidade.latitude, Cidade.longitude")

location_df.show()

case class Loc(lat: Double, lon: Double)
case class Wind(value: String, loc: Loc)

case class userLoc(user: String, lat: Double, lon: Double)

val dataPoints = location_df.map{s => Wind(s.getString(2).toString, Loc( -s.getDouble(0), -s.getDouble(1)))}
val dataPointsJson = dataPoints.toJSON.take(100)
z.angularBind("locations", dataPointsJson)


--

